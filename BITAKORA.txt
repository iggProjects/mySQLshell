IÑAKI - DARREN 

  1.- LOGIN
  2.- HELP ERRORES
  3.- DOWNLOAD
  4.- DIAGRAM
      - https://codepen.io/Nelms/pen/wvMMJg



********************************************************************
IÑAKI - METAS DÍA 

( mysqldump -uroot -p  my_lqs_admin > my_lqs_admin.sql )

23-07-2022  
  
  - colocar host number and host name in <li> de DB left side ✔✔
  - botón "clear" textarea para queries #sql-query-area ✔✔
  - cambiar el despliegue de tablas al left-aside y verficar la navegación #display-result-nav-title ✔✔
    (crear function para update de coordenadas )
  - ver si conviene ocultar left side cuando estamos en modo consola para probar queries (NO CONVIENE)
      
24-07-2022

  - CANVAS
    - https://github.com/raphamorim/canvas-experiments
    - https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D#paths

    - buscar las queries para tablas por la derecha y tablas por la izquierda ✔✔
    - pensar en diseño dinámico que centre la tabla objetivo y defina criterios para ubicar
      las tablas que apuntan a la tabla objetivo (lado izq) y las tablas a las que apunta la tabla objetivo (lado der)  

25-07-2022  

- phpmyadmin tables review  

- draw_line_pair_points_X_Y in canvas ✔✔

- first version for "help url" for troubles in mysql... 
  - https://www.googleguide.com/linking.html

- update ajax*.php para que use el request contra el array que viene de config.servers ✔✔
  - el config es para los usuarios 'root' de cada servidor
  - cómo se manejaría los usuarios nuevos creados por el root
  - estudiar creación de usuarios y privilegios. Definir qué botones puede ver un usuario de acuerdo a privilegios

26-07-2022

- LOGIN y DOWNLOAD con DARREN

- Permitir abrir make query apenas se selecciones el host 
  - esto permitiría al root, o al administrador actuar sobre el servidor, sea para crear nuevas DB 
    o para modificar DB, respaldar, eliminar, restore backups........
  - OJO: esto solo debe ser una opción para usuarios root o administrador con todos los privilegios  

- Crear DB "my_lqs_admin" 
  - crear las primeras tablas usuarios, standard_queries, favorite_queries, .... ✔✔
  - crear tag SELECT OPTIONS para colocar el select en lugar del actual btn 'tbls-rel'... igual con el de size
  - standard queries aplican a cualquier DB (campos: id, user, comment, btn_name, query, creation_date)
    - LISTENERS for case select options in '#std-queriesList'... OJO: completar leyendo la tabla que está activa

  - favorite queries están direccionadas por usuario - DB
  - store queries button (insert-update-delete)
    - Fields: id, user, db, comment, query
    - empezar solo con INSERT query optional
    - luego vemos si vale la pena el update, o solo la opc delete query

  - hacer botón para insert en la tabla standard_queries
    - que el botones INSERT - UPDATE para activar un formato de query
        --> INSERT INTO table_name (column1, column2, column3, ...) VALUES (value1, value2, value3, ...);  
          - y rellenamos a mano los datos de cada campo

  - Terminar CANVAS
    - define "queries" to obtain LEFT and RIGHT RELATIONS ARRAYS
      
      RIGHT CASE: 
      SELECT TABLE_NAME TBL,COLUMN_NAME COL, REFERENCED_TABLE_NAME REF_TBL,REFERENCED_COLUMN_NAME REF_COL FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE WHERE REFERENCED_TABLE_SCHEMA = SCHEMA() AND TABLE_NAME = 'table selected'

      LEFT CASE: 
      SELECT TABLE_NAME TBL,COLUMN_NAME COL, REFERENCED_TABLE_NAME REF_TBL,REFERENCED_COLUMN_NAME REF_COL FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE WHERE REFERENCED_TABLE_SCHEMA = SCHEMA() AND REFERENCED_TABLE_NAME = 'table selected'

    - define "drawing schema" to include:
      - drawing of tables 
      - identification of points of "pairs points arrays" when calling draw_db function

27-07-2022

  - DROP DOWN SELECTORS FOR: ✔✔
    - standard queries
    - favorite queries

  - navegación usando config.servers.php ✔✔
  - actualizar div-console cuando se cambia de host
  - TERMINAR CANVAS (mover CANVAS a #der-console ???)

  - Evaluar botones para facilitar queries tipo INSERT, UPDATE, DELETE  

  - PAGINATION FOR "SELECT REPORTS"
  
  - Test LOGIN y DOWNLOAD  

  - CASO DB SERVER
    Si seleccionamos un server, deberíamos acceder a la sql console. Por ejemplo, para crear una nueva DB en Localhost, y crear sus algunas tablas. Esto traería como consecuencia que debemos sustituir el query en ajax_Display_div_nav_izq (línea 68) $select_query = "SELECT TABLE_SCHEMA, TABLE_NAME, TABLE_TYPE, TABLE_ROWS, TABLE_COLLATION FROM information_schema.tables;"; 

28-07-2022 - 28-07-2022
  - Chequear que lee table_param cuando click btn process query, y que coloque los selectores en opc '0' 

  - write first version for "readme"
  - hacer pruebas
  - import - export buttons
  - rename database button

********************************************************************

PENDIENTE IÑAKI

CREDENCIALES CONEXIÓN A SERVERS (ajax_describeTbl.PHP, .................. )
  - deben leer el array de config.servers.php (ahora está comentado...)
  - el array está por índice, y no por nombre del host... verificar si vale la pena cambiar a 
    un array asociativo y listo

LOGIN 
  - login como root:
      - que te pida clave como root, y la guarde en mysql.users
      - por tanto, habría que redefinir la carga inicial buscando las claves en musql.users
        y no el file config.servers... ver pro's y contra's
  - creación de usuarios
  - login email para el usuario, y opción se te olvidó....

PAGINATION 
  - https://stackoverflow.com/questions/20364349/pagination-using-mysql-limit-offset

HOST BASIC INFO WHEN SELECTED
  tag #left-aside

BUTTONS 
  - FILTROS: check for type cols, cases 'BLOB' (example: mediumblob in 'tbl_arch_imagen_persona' in penjub)

  - Check syntaxis, and change especial words to uppercase and color blue.... 
      (SELECT, FROM, WHERE, INNER JOIN, ORDER BY, ....)  

  - check that basic info exist
  

CASO SQL-BTN -> cónsola "query-btn"

  - Tbl queries_fav in 

  - btns for database information like relations between tables, ......
    - example: 
      SELECT table_name, column_name, column_type, column_key 
        FROM information_schema.columns WHERE table_schema = SCHEMA() ORDER BY table_name asc

      SELECT TABLE_NAME TBL,COLUMN_NAME COL,CONSTRAINT_NAME IBFK, REFERENCED_TABLE_NAME REF_TBL,REFERENCED_COLUMN_NAME REF_COL 
        FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
        WHERE REFERENCED_TABLE_SCHEMA = SCHEMA()    


  - actualizar "#left_aside" con info DB y despligue lista tablas:
      - con efecto hover que presente campos de columnas de cada tabla 
      - posible check box para elegir algunas tablas para armar query con joins.... 

  - subdividir 'der-console' en :
    - área para escribir sql y ejecutar       
    - area resultado: caso positivo tabla, caso error: mensaje y help

  - read host and db and check last query char of textarea value. if is ; , delete  

  - add select pagination

SHOW CREATE TABLE 'myTable'

FOREIGN KEYS

  "GENERAL":
    SELECT TABLE_NAME TBL,COLUMN_NAME COL,CONSTRAINT_NAME IBFK, REFERENCED_TABLE_NAME REF_TBL,REFERENCED_COLUMN_NAME REF_COL 
    FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
    WHERE REFERENCED_TABLE_SCHEMA = SCHEMA()    
      -- optional put AND REFERENCED_TABLE_NAME = 'my table'
      -- optional put AND ( TABLE_NAME = 'my table' OR REFERENCED_TABLE_NAME = 'my table' )
  
  EJ "PENJUB TABLE tbl_persona": 
        
    penjub, tablas adonde apunta "tbl_persona"   
    SELECT TABLE_NAME TBL,COLUMN_NAME COL,CONSTRAINT_NAME IBFK, REFERENCED_TABLE_NAME REF_TBL,REFERENCED_COLUMN_NAME REF_COL 
    FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
    WHERE REFERENCED_TABLE_SCHEMA = SCHEMA() AND TABLE_NAME = 'tbl_persona'
    
    penjub, tablas que apuntan a "tbl_persona"   
    SELECT TABLE_NAME TBL,COLUMN_NAME COL,CONSTRAINT_NAME IBFK, REFERENCED_TABLE_NAME REF_TBL,REFERENCED_COLUMN_NAME REF_COL 
    FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
    WHERE REFERENCED_TABLE_SCHEMA = SCHEMA() AND REFERENCED_TABLE_NAME = 'tbl_persona'

    todas las relacionadas con tbl_persona
    SELECT TABLE_NAME TBL,COLUMN_NAME COL,CONSTRAINT_NAME IBFK, REFERENCED_TABLE_NAME REF_TBL,REFERENCED_COLUMN_NAME REF_COL 
    FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE 
    WHERE REFERENCED_TABLE_SCHEMA = SCHEMA() AND ( TABLE_NAME='tbl_persona' OR REFERENCED_TABLE_NAME='tbl_persona' )  
 




SHOW FULL COLUMNS FROM TABLES OF A DB 
  - SELECT table_name, column_name FROM  information_schema.columns WHERE table_schema = SCHEMA() ORDER BY table_name asc
  - SELECT table_name, column_name, column_type, column_key FROM information_schema.columns WHERE table_schema = SCHEMA() ORDER BY table_name asc


-------------------------------------------------------------------------------------------

DOWNLOAD & INSTALATION procedure with readme.md


*******************************************************************************************

INFORMATION_SCHEMA system tables

  You can extract metadata about schema objects managed by InnoDB using InnoDB INFORMATION_SCHEMA system tables. 
  This information comes from the InnoDB internal system tables (also referred to as the InnoDB data dictionary), 
  which cannot be queried directly like regular InnoDB tables. Traditionally, you would get this type of 
  information using the techniques from Section 14.18, “InnoDB Monitors”, setting up InnoDB monitors and 
  parsing the output from the SHOW ENGINE INNODB STATUS statement. The InnoDB INFORMATION_SCHEMA table 
  interface allows you to query this data using SQL....
  https://dev.mysql.com/doc/refman/5.7/en/innodb-information-schema-system-tables.html

  MySQL supports foreign keys, which permit cross-referencing related data across tables, and foreign key constraints, 
  which help keep the related data consistent.
  A foreign key relationship involves a parent table that holds the initial column values, and a child table with 
  column values that reference the parent column values. A foreign key constraint is defined on the child table.
  https://dev.mysql.com/doc/refman/5.6/en/create-table-foreign-keys.html

FOREIGN KEYS 
  https://www.techrepublic.com/article/an-introduction-to-foreign-keys-and-referential-integrity-in-mysql/


*********************************************************************************************

DIAGRAM OF DB RELATIONS FROM SCRACHT

  - https://stackoverflow.com/questions/20855065/how-to-find-all-the-relations-between-all-mysql-tables
  - https://tableplus.com/blog/2018/08/mysql-how-to-see-foreign-key-relationship-of-a-table.html
  - https://help.tableau.com/current/pro/desktop/en-us/relate_tables.htm
  - https://dataedo.com/kb/query/mysql/list-tables-with-most-relationships

queries:

SELECT 
  `TABLE_SCHEMA` DB,
  `TABLE_NAME` TBL,
  `COLUMN_NAME` FIELD,
  `REFERENCED_TABLE_SCHEMA` REF_DB,
  `REFERENCED_TABLE_NAME` REF_TBL,
  `REFERENCED_COLUMN_NAME` REF_FIELD 
FROM
  `INFORMATION_SCHEMA`.`KEY_COLUMN_USAGE`
WHERE
  `TABLE_SCHEMA` = SCHEMA()
  AND `REFERENCED_TABLE_NAME` IS NOT NULL;

------------------------------
// 
SELECT 
    count(1) totalrelationships ,
    c.table_name tablename,
    CONCAT(' ',GROUP_CONCAT(c.column_name ORDER BY ordinal_position SEPARATOR ', ')) columnname,
    CONCAT(' ',GROUP_CONCAT(c.column_type ORDER BY ordinal_position SEPARATOR ', ')) columntype    
FROM
    information_schema.columns c RIGHT JOIN
    (SELECT column_name , column_type FROM information_schema.columns WHERE column_key in ('PRI','MUL') AND table_schema = DATABASE() AND table_name = 'employees') AS p USING (column_name,column_type)
WHERE c.table_schema = DATABASE() AND c.table_name != 'employees' 
GROUP BY tablename 
HAVING (locate('emp_no',columnname) > 0)
ORDER BY totalrelationships desc, columnname
------------------------------
// comment: relaciones de una tabla con las demás
SELECT 
    count(1) totalrelationships ,
    c.table_name tablename,
    CONCAT(' ',GROUP_CONCAT(c.column_name ORDER BY ordinal_position SEPARATOR ', ')) columnname,
    CONCAT(' ',GROUP_CONCAT(c.column_type ORDER BY ordinal_position SEPARATOR ', ')) columntype    
FROM
    information_schema.columns c RIGHT JOIN
    (SELECT column_name , column_type FROM information_schema.columns WHERE table_schema = DATABASE() AND table_name = 'employees') AS p USING (column_name,column_type)
WHERE
    c.table_schema = DATABASE()    
    GROUP BY tablename
    ORDER BY totalrelationships desc, columnname
-------------------------------------

What I want in most cases is to know all FKs that point to a specific table. In this case I run:
SELECT 
  `TABLE_SCHEMA`,                          -- Foreign key schema
  `TABLE_NAME`,                            -- Foreign key table
  `COLUMN_NAME`,                           -- Foreign key column
  `REFERENCED_TABLE_SCHEMA`,               -- Origin key schema
  `REFERENCED_TABLE_NAME`,                 -- Origin key table
  `REFERENCED_COLUMN_NAME`                 -- Origin key column
FROM `INFORMATION_SCHEMA`.`KEY_COLUMN_USAGE`
WHERE `TABLE_SCHEMA` = SCHEMA()
AND   `REFERENCED_TABLE_NAME` IS NOT NULL  -- Only tables with foreign keys

--------------------------------



    
      




