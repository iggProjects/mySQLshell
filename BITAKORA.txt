77PENDIENTE

LOGIN 
  - login como root:
      - que te pida clave como root, y la guarde en mysql.users
      - por tanto, habría que redefinir la carga inicial buscando las claves en musql.users
        y no el file config.servers... ver pro's y contra's
  - creación de usuarios
  - login email para el usuario, y opción se te olvidó....

display_sql_result -> colocar al inicio <p id='sql-query'></p> , letra pequeña, color vinotinto    

BUTTONS "nav-btns"
  - definir cuáles van de acuerdo a la ruta elegida pr el usuario   
  - 

PAGINATION 
  - https://stackoverflow.com/questions/20364349/pagination-using-mysql-limit-offset


CASO SQL-BTN -> cónsola "query-btn"

  - Tbl queries_fav in 

  - btns: 
    - Check syntaxis
    - help iframe using google ???

  - actualizar "#left_aside" con info DB y despligue lista tablas:
      - con efecto hover que presente campos de columnas de cada tabla 
      - posible check box para elegir algunas tablas para armar query con joins.... 

  - subdividir 'der-console' en :
    - área para escribir sql y ejecutar       
    - area resultado: caso positivo tabla, caso error: mensaje y help


  - read host and db and check last query char of textarea value. if is ; , delete  

  - add select pagination

  - Limpiar area al salir de la consola "sql" ✔

ADD listener to display DB of selected host (like it is done with DB listener with tables associated)

ADD listener to display_left_aside tables in case sql-btn active
  - desc of table columns


REVISAR la lógica del '#left_aside' respecto a buttons invoacados
  - hacer navegación y verificar cuando debe hacerse clear del área


-------------------------------------------------------------------------------------------

DOWNLOAD & INSTALATION procedure with readme.md


*******************************************************************************************

INFORMATION_SCHEMA system tables

  You can extract metadata about schema objects managed by InnoDB using InnoDB INFORMATION_SCHEMA system tables. 
  This information comes from the InnoDB internal system tables (also referred to as the InnoDB data dictionary), 
  which cannot be queried directly like regular InnoDB tables. Traditionally, you would get this type of 
  information using the techniques from Section 14.18, “InnoDB Monitors”, setting up InnoDB monitors and 
  parsing the output from the SHOW ENGINE INNODB STATUS statement. The InnoDB INFORMATION_SCHEMA table 
  interface allows you to query this data using SQL....
  https://dev.mysql.com/doc/refman/5.7/en/innodb-information-schema-system-tables.html

  MySQL supports foreign keys, which permit cross-referencing related data across tables, and foreign key constraints, 
  which help keep the related data consistent.
  A foreign key relationship involves a parent table that holds the initial column values, and a child table with 
  column values that reference the parent column values. A foreign key constraint is defined on the child table.
  https://dev.mysql.com/doc/refman/5.6/en/create-table-foreign-keys.html

FOREIGN KEYS 
  https://www.techrepublic.com/article/an-introduction-to-foreign-keys-and-referential-integrity-in-mysql/


*********************************************************************************************

DIAGRAM OF DB RELATIONS FROM SCRACHT

  - https://stackoverflow.com/questions/20855065/how-to-find-all-the-relations-between-all-mysql-tables
  - https://tableplus.com/blog/2018/08/mysql-how-to-see-foreign-key-relationship-of-a-table.html
  - https://help.tableau.com/current/pro/desktop/en-us/relate_tables.htm
  - https://dataedo.com/kb/query/mysql/list-tables-with-most-relationships

queries:

SELECT 
  `TABLE_SCHEMA`,
  `TABLE_NAME`,
  `COLUMN_NAME`,
  `REFERENCED_TABLE_SCHEMA`,
  `REFERENCED_TABLE_NAME`,
  `REFERENCED_COLUMN_NAME`
FROM
  `INFORMATION_SCHEMA`.`KEY_COLUMN_USAGE`
WHERE
  `TABLE_SCHEMA` = SCHEMA()
  AND `REFERENCED_TABLE_NAME` IS NOT NULL;

------------------------------
// 
SELECT 
    count(1) totalrelationships ,
    c.table_name tablename,
    CONCAT(' ',GROUP_CONCAT(c.column_name ORDER BY ordinal_position SEPARATOR ', ')) columnname,
    CONCAT(' ',GROUP_CONCAT(c.column_type ORDER BY ordinal_position SEPARATOR ', ')) columntype    
FROM
    information_schema.columns c RIGHT JOIN
    (SELECT column_name , column_type FROM information_schema.columns WHERE column_key in ('PRI','MUL') AND table_schema = DATABASE() AND table_name = 'employees') AS p USING (column_name,column_type)
WHERE c.table_schema = DATABASE() AND c.table_name != 'employees' 
GROUP BY tablename 
HAVING (locate('emp_no',columnname) > 0)
ORDER BY totalrelationships desc, columnname
------------------------------
// comment: relaciones de una tabla con las demás
SELECT 
    count(1) totalrelationships ,
    c.table_name tablename,
    CONCAT(' ',GROUP_CONCAT(c.column_name ORDER BY ordinal_position SEPARATOR ', ')) columnname,
    CONCAT(' ',GROUP_CONCAT(c.column_type ORDER BY ordinal_position SEPARATOR ', ')) columntype    
FROM
    information_schema.columns c RIGHT JOIN
    (SELECT column_name , column_type FROM information_schema.columns WHERE table_schema = DATABASE() AND table_name = 'employees') AS p USING (column_name,column_type)
WHERE
    c.table_schema = DATABASE()    
    GROUP BY tablename
    ORDER BY totalrelationships desc, columnname
-------------------------------------

What I want in most cases is to know all FKs that point to a specific table. In this case I run:
SELECT 
  `TABLE_SCHEMA`,                          -- Foreign key schema
  `TABLE_NAME`,                            -- Foreign key table
  `COLUMN_NAME`,                           -- Foreign key column
  `REFERENCED_TABLE_SCHEMA`,               -- Origin key schema
  `REFERENCED_TABLE_NAME`,                 -- Origin key table
  `REFERENCED_COLUMN_NAME`                 -- Origin key column
FROM `INFORMATION_SCHEMA`.`KEY_COLUMN_USAGE`
WHERE `TABLE_SCHEMA` = SCHEMA()
AND   `REFERENCED_TABLE_NAME` IS NOT NULL  -- Only tables with foreign keys

--------------------------------



    
      




